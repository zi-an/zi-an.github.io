[{"id":0,"href":"/docs/%E7%AC%94%E8%AE%B0%E6%9C%AC/win11-ltsc/%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F/","title":"安装系统","section":"windows 11","content":" 系统安装 # 推荐使用LTSC,专业版需登录账号才能完成安装 "},{"id":1,"href":"/docs/%E7%AC%94%E8%AE%B0%E6%9C%AC/win11-ltsc/%E7%B3%BB%E7%BB%9F%E4%BC%98%E5%8C%96/","title":"系统优化","section":"windows 11","content":" 系统优化 # "},{"id":2,"href":"/posts/2024-11-15/","title":"UZI retry","section":"日记本","content":" UZI 又复出老头杯 # 恭喜uzi又双叒叕复出了 "},{"id":3,"href":"/posts/2024-11-03/","title":"恭喜Faker","section":"日记本","content":" 恭喜Faker第五冠！ # 亚运会视频\n已经生效!\n"},{"id":4,"href":"/docs/%E4%BB%A3%E7%A0%81%E5%BA%93/%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91/","title":"代码编译","section":"代码库","content":" 代码编译 # main.go # package main\rimport (\r\u0026#34;fmt\u0026#34;\r\u0026#34;io\u0026#34;\r\u0026#34;net/http\u0026#34;\r\u0026#34;net/url\u0026#34;\r\u0026#34;os\u0026#34;\r\u0026#34;os/exec\u0026#34;\r\u0026#34;strings\u0026#34;\r\u0026#34;time\u0026#34;\r)\rfunc main() {\rInit()\rserver := \u0026amp;http.Server{\rAddr: \u0026#34;0.0.0.0:8888\u0026#34;,\r}\rmux := http.NewServeMux()\rmux.HandleFunc(\u0026#34;/get\u0026#34;, get)\rmux.HandleFunc(\u0026#34;/post\u0026#34;, post)\rmux.HandleFunc(\u0026#34;/m3u8er\u0026#34;, m3u8er)\rmux.HandleFunc(\u0026#34;/noter\u0026#34;, noter)\rserver.Handler = mux\r_ = server.ListenAndServe()\r}\rfunc Init() {\rdirs := []string{\u0026#34;/home/nginx/m3u8/\u0026#34;, \u0026#34;/home/nginx/note/\u0026#34;}\rfor _, dir := range dirs {\r_, err := os.Stat(dir)\rif err == nil {\r_ = os.MkdirAll(dir, 0777)\r}\r}\r}\r// 获取客户端信息\rfunc get(w http.ResponseWriter, r *http.Request) {\rwrite := \u0026#34;ip:\u0026#34; + r.Header.Get(\u0026#34;X-Real-IP\u0026#34;) + \u0026#34;\\n\u0026#34;\rfor k, v := range r.Header {\rwrite = write + k + \u0026#34;:\u0026#34; + strings.Join(v, \u0026#34;;\u0026#34;) + \u0026#34;\\n\u0026#34;\r}\r_, _ = w.Write([]byte(write))\r}\r// 文件上传\r// 测试数据: curl http://127.0.0.1:8888/post -F file=@bank.jpg -H \u0026#34;Referer: http://127.0.0.1/?from=/upload/\u0026#34;\rfunc post(w http.ResponseWriter, r *http.Request) {\rfrom := r.Header.Get(\u0026#34;Referer\u0026#34;)\rfrom = from[strings.Index(from, \u0026#34;=/\u0026#34;)+1 : len(from)] //获取相对地址\rswitch r.Method {\rcase \u0026#34;GET\u0026#34;:\r_, _ = w.Write([]byte(string(\u0026#34;method is GET\u0026#34;)))\rcase \u0026#34;POST\u0026#34;:\r_ = r.ParseForm()\rimgFile, _, _ := r.FormFile(\u0026#34;file\u0026#34;) //获取文件内容\rdefer imgFile.Close()\rfiles := r.MultipartForm.File //获取表单中的信息\rimgName := files[\u0026#34;file\u0026#34;][0].Filename //获取表单文件中name为file的数据\rimgName = \u0026#34;.\u0026#34; + from + imgName\r_, err := os.Stat(imgName) //判断文件是否存在,在则隐藏并添加时间戳\rif err == nil {\rloc, _ := time.LoadLocation(\u0026#34;Asia/Taipei\u0026#34;)\rnewName := \u0026#34;.\u0026#34; + from + \u0026#34;.\u0026#34; + files[\u0026#34;file\u0026#34;][0].Filename + \u0026#34;.\u0026#34; + time.Now().In(loc).Format(\u0026#34;20060102_150405\u0026#34;)\r_ = os.Rename(imgName, newName)\r}\rsaveFile, _ := os.Create(imgName)\r_ = saveFile.Close()\r_, _ = io.Copy(saveFile, imgFile) //保存\rhttp.Redirect(w, r, \u0026#34;/?from=\u0026#34;+from, http.StatusSeeOther)\rdefault:\rfmt.Print(\u0026#34;error method\u0026#34;)\r}\r}\r// m3u8下载\rfunc m3u8er(w http.ResponseWriter, r *http.Request) {\ruri := r.PostFormValue(\u0026#34;uri\u0026#34;)\ruri, _ = url.QueryUnescape(uri)\rname := r.PostFormValue(\u0026#34;name\u0026#34;)\rfmt.Println(uri, \u0026#34;:\u0026#34;, name)\r_ = exec.Command(\u0026#34;m3u8downloader\u0026#34;, uri, name).Run()\rhttp.Redirect(w, r, \u0026#34;/?from=/m3u8/\u0026#34;, http.StatusSeeOther)\r}\rfunc noter(w http.ResponseWriter, r *http.Request) {\rnote := r.PostFormValue(\u0026#34;note\u0026#34;)\rfile, _ := os.OpenFile(\u0026#34;/home/nginx/note/note.log\u0026#34;, os.O_RDWR|os.O_CREATE|os.O_APPEND, 0666)\rloc, _ := time.LoadLocation(\u0026#34;Asia/Taipei\u0026#34;)\r_, _ = file.WriteString(time.Now().In(loc).Format(\u0026#34;0102_1504: \u0026#34;) + note + \u0026#34;\\n\u0026#34;)\rhttp.Redirect(w, r, \u0026#34;/?from=/note/\u0026#34;, http.StatusSeeOther)\r} "},{"id":5,"href":"/docs/%E4%BB%A3%E7%A0%81%E5%BA%93/%E5%9C%86%E5%91%A8%E8%AE%A1%E7%AE%97/","title":"圆周计算","section":"代码库","content":" 计算圆周率 # 圆周率查询 https://www.pilookup.com/zh-cn/ 圆周率下载 https://www.pilookup.com/zh-cn/download.html 源代码 https://www.kurims.kyoto-u.ac.jp/~ooura/pi_fft.html 最大ftt值为536870912大约512M内存 使用FFT+AGM代码计算 # apt install gcc make -y\rwget https://www.kurims.kyoto-u.ac.jp/~ooura/pi_fftc6_src.tgz\rtar -zxvf pi_fftc6_src.tgz\rcd pi_fftc6/\rsed -i \u0026#34;s|-fast|-Ofast|g\u0026#34; Makefile_64bit\rsed -i \u0026#39;s|scanf(\u0026#34;%lg\u0026#34;, \u0026amp;x)|x=100000|g\u0026#39; pi_fftcw.c\rmake -f Makefile_64bit\rnohup ./pi_cw \u0026amp;\rcat pi.dat 四行代码求圆周率 # 资料 https://cs.uwaterloo.ca/~alopez-o/math-faq/mathtext/node12.html pi.c如下,执行 * gcc pi.c \u0026amp;\u0026amp; ./a.out * #include \u0026lt;stdio.h\u0026gt;\rint a=10000,b,c=2800,d,e,f[2801],g;\rvoid main(){\rfor(;b-c;)f[b++]=a/5;\rfor(;d=0,g=c*2;c-=14,printf(\u0026#34;%.4d\u0026#34;,e+d/a),e=d%a)for(b=c;d+=f[b]*a,\rf[b]=d%--g,d/=g--,--b;d*=b);} 下载 # wget https://files.pilookup.com/pi/1-100000000.zip\rwget https://files.pilookup.com/pi/100000001-200000000.zip\rwget https://files.pilookup.com/pi/200000001-300000000.zip wget https://files.pilookup.com/pi/300000001-400000000.zip wget https://files.pilookup.com/pi/400000001-500000000.zip wget https://files.pilookup.com/pi/500000001-600000000.zip wget https://files.pilookup.com/pi/600000001-700000000.zip wget https://files.pilookup.com/pi/700000001-800000000.zip wget https://files.pilookup.com/pi/800000001-900000000.zip wget https://files.pilookup.com/pi/900000001-1000000000.zip "},{"id":6,"href":"/docs/%E4%BB%A3%E7%A0%81%E5%BA%93/%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC/","title":"执行脚本","section":"代码库","content":" 服务器常用脚本 # 参考资料 https://github.com/fengyuhetao/shell\n常用定时器 # 自动休眠 清楚内存 更新容器内的git项目 */10 * * * * /usr/powersave.sh\r*/10 * * * * echo 3 \u0026gt; /proc/sys/vm/drop_caches\r0 */2 * * * docker exec zian updategit powersave.sh # #!/bin/bash\rlogintime=`last docker --time-format iso | head -n1 | awk \u0026#39;{print $6}\u0026#39;`\r#logintime=\u0026#34;2024-09-11T07:18:18+08:00\u0026#34;\rif [ ${#logintime} -eq 6 ];then\recho \u0026#34;555\u0026#34; \u0026gt;\u0026gt; 555.log\relse\rlogintime=`date -d $logintime +%s`\rlogintime=$(expr $logintime)\rnow=$(expr `date +%s`)\rnow=$(expr $now - $logintime)\rif [ $now -gt 7200 ] ;then\rsystemctl suspend\rfi\rfi updategit # #!/bin/bash\rcd /var/www/\rcommand -v unzip \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 || apt install -y unzip\rwget github.com/zi-an/zi-an.github.io/archive/refs/heads/master.zip\runzip -o master.zip\rrm master.zip alias # alias zian=\u0026#34;docker exec -it zian bash\u0026#34;\ralias xunlei=\u0026#34;docker exec -it xunlei bash\u0026#34;\ralias maomiav=\u0026#34;docker exec -it maomiav bash\u0026#34;\ralias dockerps=\u0026#34;docker ps -a --format \u0026#39;table {{.Names}}\\t{{.Status}}\u0026#39;\u0026#34; "},{"id":7,"href":"/docs/%E6%9C%8D%E5%8A%A1%E5%99%A8/debian/%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F/","title":"安装系统","section":"debian","content":" 服务器安装 # 清华镜像下载 软碟通 王涛 7C81-1689-4046-626F 只要下载4G左右的,1G以下是网络安装版,7G以上是教育版(内置的软件不同) "},{"id":8,"href":"/docs/%E6%9C%8D%E5%8A%A1%E5%99%A8/debian/%E5%AE%B9%E5%99%A8%E8%B5%84%E6%96%99/","title":"容器资料","section":"debian","content":" Docker相关 # "},{"id":9,"href":"/docs/%E7%AC%94%E8%AE%B0%E6%9C%AC/linux/%E7%B3%BB%E7%BB%9F%E6%8E%A8%E8%8D%90/","title":"系统推荐","section":"笔记本","content":" 系统推荐 # Cinnamon是debian官方维护的桌面系统，是debian中的一个桌面，个人感觉比较好看\n使用默认安装即可\n"},{"id":10,"href":"/docs/%E7%AC%94%E8%AE%B0%E6%9C%AC/win11-ltsc/%E6%89%A9%E5%B1%95%E5%91%BD%E4%BB%A4/","title":"扩展命令","section":"windows 11","content":" 扩展命令 # powershell虽然好用,但是命令与Linux差别巨大 wget hugo "},{"id":11,"href":"/docs/%E7%AC%94%E8%AE%B0%E6%9C%AC/win11-ltsc/%E8%99%8E%E7%89%99%E6%8E%A8%E6%B5%81/","title":"虎牙推流","section":"windows 11","content":"nohup ffmpeg -ss 1:23 -re -stream_loop -1 -i 3.2_CG16_2_mux.mp4 -c:v copy -c:a copy-f flv rtmp://al.direct.huya.com/huyalive/1787660552-1787660552-0-3575444560-10057-A-1727171574-1?seq=1731856465590\u0026amp;type=simple \u0026amp;\nffmpeg -ss 1:23 -re -stream_loop -1 -i heishenhua.mp4 -c:v copy -f flv rtmp://215.mm:1935/hls/999 http://215.mm/hls/999.m3u8\nnohup ffmpeg -ss 1:23 -re -stream_loop -1 -i 3.2_CG16_2_mux.mp4 -c:v copy -acodec copy -f flv rtmp://al.direct.huya.com/huyalive/1787660552-1787660552-7438266878141176820-3575444560-10057-A-1731860186-1?seq=1731856465590\u0026amp;type=simple \u0026amp;\n最快的剪辑视频 # ffmpeg -ss 1:25 -i 3.2_CG16_2_mux.mp4 -c: copy bbb.mp4 服务器上的参数 # ffmpeg -ss 1:23 -i heishenhua.mp4 -c:v copy -acodec copy -f flv 1.flv ffmpeg -ss 1:23 -i heishenhua.mp4 -c:v copy -f flv 2.flv\n虎牙直播测试中\n-re (input) 以本机帧速率读取输入。这相当于设置-readrate 1。 -stream_loop number (input) 设置输入流应循环的次数。Loop 0表示无循环，loop-1表示无限循环。 -codec[:stream_specifier] codec (input/output,per-stream)为一个或多个流选择编码器（当在输出文件之前使用时）或解码器（当在输入文件之前使用时）。codec是解码器/编码器的名称或特殊值copy（仅输出），指示流不被重新编码。 -c: copy 表示所有流格式都是复制 nohup ffmpeg -re -stream_loop -1 -i bbb.mp4 -c: copy -f flv \u0026#34;rtmp://al.direct.huya.com/huyalive/1787660552-1787660552-7438266878141176820-3575444560-10057-A-1731860186-1?seq=1731856465590\u0026amp;type=simple\u0026#34; \u0026amp; "},{"id":12,"href":"/docs/%E7%AC%94%E8%AE%B0%E6%9C%AC/win11-ltsc/%E8%B5%84%E6%BA%90%E4%B8%8B%E8%BD%BD/","title":"资源下载","section":"windows 11","content":" 资源下载 # win11x64\n开发软件 # webstorm(非商业免费) idea goland "}]