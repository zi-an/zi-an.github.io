<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>学习 on </title>
    <link>https://example.org/categories/%E5%AD%A6%E4%B9%A0/</link>
    <description>Recent content in 学习 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 07 Jul 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://example.org/categories/%E5%AD%A6%E4%B9%A0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>go与java性能对比</title>
      <link>https://example.org/posts/study/go-java/</link>
      <pubDate>Mon, 07 Jul 2025 00:00:00 +0000</pubDate>
      <guid>https://example.org/posts/study/go-java/</guid>
      <description>代码&#xD;#&#xD;go build web.go nohup ./web &amp;amp; package main import ( &amp;#34;net/http&amp;#34; &amp;#34;strconv&amp;#34; &amp;#34;sync/atomic&amp;#34; ) func main() { var count int32 http.HandleFunc(&amp;#34;/&amp;#34;, func(w http.ResponseWriter, r *http.Request) { atomic.AddInt32(&amp;amp;count, 1) _, _ = w.Write([]byte(strconv.Itoa(int(count)))) }) http.HandleFunc(&amp;#34;/favicon.ico&amp;#34;, func(w http.ResponseWriter, r *http.Request) {}) _ = http.ListenAndServe(&amp;#34;:8080&amp;#34;, nil) } javac Web.java nohup java Web &amp;amp; import com.sun.net.httpserver.HttpExchange; import com.sun.net.httpserver.HttpHandler; import com.sun.net.httpserver.HttpServer; import java.io.IOException; import java.io.OutputStream; import java.net.InetSocketAddress; import java.util.concurrent.atomic.AtomicInteger; public class Web { public static void main(String[] args) throws Exception { HttpServer server = HttpServer.</description>
    </item>
    <item>
      <title>汽车及定位</title>
      <link>https://example.org/posts/2025-05-01/</link>
      <pubDate>Thu, 01 May 2025 00:00:00 +0000</pubDate>
      <guid>https://example.org/posts/2025-05-01/</guid>
      <description>源自AI:XX全系定位及价格,做成表格 ##奔驰 车型系列 价格区间 说明 A-Class ¥200,000-¥300,000 入门级轿车,注重操控性和时尚设计 B-Class ¥250,000-¥350,000 中型轿车,适合家庭和旅游使用 C-Class ¥17.28-21.86万元 中型轿车,畅销车型,设计时尚 E-Class ¥29.48-44.38万元 豪华轿车,适合商务和旅游 S-Class ¥64.76-173.06万元 顶级豪华轿车,安全性与舒适性俱佳 GLA-Class ¥300,000-¥400,000 紧凑型SUV,适合城市和家庭使用 GLB-Class ¥15.59-21.18万元 中型SUV,兼顾城市和轻度越野 GLC-Class ¥25.58-35.93万元 中型SUV,适合城市和家庭使用 GLE-Class ¥700,000-¥1,200,000 中大型SUV,适合长途旅行和家庭使用 GLS-Class ¥1,200,000+ 全尺寸SUV,适合商务和豪华出行 AMG系列 ¥39.98万至255.4万不等 高性能运动车型,动力强劲 Maybach系列 ¥143.80-679.80万元 超豪华商务车,代表奔驰的高端市场 ##宝马&#xA;车型系列 车型名称 定位 价格区间(万元) 说明 1系 1系 入门级紧凑型轿车 19.88-31.98 适合预算有限但渴望拥有宝马品牌的消费者。 2系 2系 小型轿跑车 24-27 以时尚动感的设计吸引年轻消费者。 3系 3系 中型轿车 29.39-39.89 作为经典的紧凑型轿车,拥有高保有量和实用特性。 4系 4系 中型轿跑车 42-55 定位在3系和5系之间,强调运动性能和优雅气质。 5系 5系 中大型轿车 42.</description>
    </item>
    <item>
      <title>RuoYi-Vue</title>
      <link>https://example.org/posts/study/ruoyi/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://example.org/posts/study/ruoyi/</guid>
      <description>| https://github.com/yangzongzhuan/RuoYi-Vue&#xA;编译部署v3.9.0版&#xD;#&#xD;apt update apt install -y git maven nginx npm openjdk-21-jdk-headless cd ~ git clone --branch=springboot3 https://gitee.com/y_project/RuoYi-Vue.git ruoyi-vue cd ruoyi-vue mvn package cp ruoyi-admin/target/ruoyi-admin.jar ~ cd ruoyi-ui npm install --registry=https://registry.npmmirror.com 参数优化&#xD;#&#xD;修改redis及密码 修改登录token有效期为10086分钟 修改mysql数据库及密码 除去druid监控的密码,空的也必须覆盖 直接进入druid的管理页面 cd ~ cp ./ruoyi-vue/ruoyi-admin/target/classes/application* . sed -i &amp;#39;s|localhost|172.20.0.1|g&amp;#39; application.yml sed -i &amp;#39;s| password:| password: zian|g&amp;#39; application.yml sed -i &amp;#39;s|expireTime: 30|expireTime: 10086|g&amp;#39; application.yml sed -i &amp;#39;s|localhost|172.20.0.1|g&amp;#39; application-druid.yml sed -i &amp;#39;s|username: root|username: zian|g&amp;#39; application-druid.</description>
    </item>
  </channel>
</rss>
